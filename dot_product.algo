

PROCEDURE dot_product(n : INTEGER VAR v1, v2 : ARRAY_OF FLOAT)
VAR
    i : INTEGER;
BEGIN
    FOR i FROM 0 TO n STEP 1  DO
        Read(v1[i]);
    END_FOR
    FOR i FROM 0 TO n STEP 1  DO
        Read(v2[i]);
    END_FOR
    ps := v1[i]*v2[i]
END

ALGORITHM dot_product
VAR
    i,n: INTEGER 
    v1, v2 : ARRAY_OF FLOAT[1..20]; // nom tab, type tab et taille tab
    ps: FLOAT
BEGIN
    Read(n); // taille elmts des vecteurs v1 et v2
    FOR i FROM 0 TO n-1 STEP 1  DO   //lire elmts dans v1
        Read(v1[i]);  
    END_FOR
    FOR i FROM 0 TO n-1 STEP 1  DO  //lire elmts dans v2
        Read(v2[i]); 
    END_FOR
    ps:= v1[i]*v2[i]; //produit de v1 et v2
END

// verification avec le couple (u1,u2) de vecteur de type Float 
PROCEDURE dot_product(u1,u2);
    IF(ps = 0)THEN 
        write(u1,u2,"are orthogonal");
    ELSE 
        write(u1,u2,"are not orthogonals");
    END_IF

FUNCTION dot_product(v1, v2 :ARRAY_OF) : FLOAT
VAR
    i,n: INTEGER 
    v1, v2 : ARRAY_OF FLOAT[1..20]; 
    ps: FLOAT
BEGIN
    Read(n); 
    FOR i FROM 0 TO n-1 STEP 1  DO   
        Read(v1[i]);  
    END_FOR
    FOR i FROM 0 TO n-1 STEP 1  DO  
        Read(v2[i]); 
    END_FOR
    ps:= v1[i]*v2[i]; 
    RETURN ps;
END